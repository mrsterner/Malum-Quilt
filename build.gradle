plugins {
	id 'maven-publish'
	id 'io.github.juuxel.loom-quiltflower' version '1.8.+'
	id 'fabric-loom' version '1.3-SNAPSHOT'
}

archivesBaseName = project.archives_base_name
version = "${project.version}+${project.minecraft_version}"
group = project.maven_group
sourceCompatibility = 1.17 // java 17
targetCompatibility = 1.17

loom {
	accessWidenerPath = file("src/main/resources/malum.accesswidener")
	runs {
		datagen {
			server()

			name "Minecraft Data"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"

			runDir "build/datagen"
		}
	}
}

sourceSets.main.resources.srcDirs += ['src/main/generated']

repositories {
	maven {
		url = 'https://api.modrinth.com/maven'
		content {
			includeGroup 'maven.modrinth'
		}
	}
	maven {
		name = 'Quilt'
		url = 'https://maven.quiltmc.org/repository/release'
	}
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/"
	}
	maven {
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
	}
	maven {
		name = "JitPack"
		url = 'https://jitpack.io'
	}
	maven {
		name = "Reach Entity Attributes"
		url = "https://maven.jamieswhiteshirt.com/libs-release"
	}
	maven {
		url = "https://mvn.devos.one/snapshots/"
	}

	mavenCentral()
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"

	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation("dev.emi:trinkets:${project.trinkets}")

	modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca}")
	modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca}")
	modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-world:${project.cca}")

	modImplementation("com.github.Chocohead:Fabric-ASM:${project.fabric_asm}")
	include("com.github.Chocohead:Fabric-ASM:${project.fabric_asm}")

	//include("io.github.ladysnake:satin:${project.satin}")
	//modRuntimeOnly("maven.modrinth:sodium:${project.sodium}")

	modImplementation include("maven.modrinth:midnightlib:$midnightlib_version")
	modApi include("dev.sterner:LodestoneLib-Fabric:$lodestone_version")
	modImplementation("com.jamieswhiteshirt:reach-entity-attributes:${project.reach}")

	include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.2.0-rc.2")))
	modImplementation include("io.github.fabricators_of_create.Porting-Lib:Porting-Lib:2.1.1127+1.20")
}

processResources {
	inputs.property 'version', version

	filesMatching('fabric.mod.json') {
		expand "version": version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.release = 17
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
	withSourcesJar()
}

jar {
	from('LICENSE') {
		rename { "${it}_${archivesBaseName}" }
	}
}


publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	repositories {
		mavenLocal()
	}
}


